

	View Resolver
	
		-	Controller에서 전달받은 View의 이름(Controller 클래스의 메소드 return 값)을 기반으로	(=return "****";)
			jsp 파일을 찾아서 선택하고 jsp 데이터를 분석해서
			응답 결과를 만들어 전달함
			
			
		-	ViewResolver가 사용하는 View의 이름을 지정하는 방법
			ㄴ	
		
		
		-	jsp를 통해서 응답 결과를 만들 때 필요한 data를 전달하는 방법
			ㄴ	
		
		
	HttpServletRequest
	
		-	Spring MVC가 jsp를 처리할 때
			HttpServletRequest 객체를(자동으로) 생성해서 jsp로 전달함
		-	ViewResolver는 이것을 이용해서 jsp 작업 시 data를 사용함
	
	
	
		1)	웹 브라우저 주소 표시줄에 /test1이 표시되면		(=요청 정보)
		2)	DispatcherServler이 요청 정보를 받아 분석해서 controller를 선택함
		3)	@GetMapping("test1")이 있는 메소드를 호출함
		4)	이 메소드의 return 값으로 지정된 이름의 jsp 파일을 선택함
		5)	이 정보를 ViewResolver가 받아서 해당 jsp 파일을 분석함
		6)	해당 jsp 파일에 있는 java code나 EL, JSTL 등을 모두 실행시킴
		7)	이 결과를 다시 DispatcherServlet으로 전달함
		8)	여기서 생성된 정보(html)를 Client로 보내면
		9)	Client의 web browser가 이를 rendering해서 화면으로 보여줌
	
	
	HttpServletRequest 객체를 주입받는 방법
		-	public String test2(HttpServletRequest request)
			ㄴ	request.setAttribute(variable, value)
		
		
	Model 객체를 주입받는 방법
		-	public String test3(Model model)
			ㄴ	Model 객체를 주입 받으면 HttpServletRequest 객체에 담아져서 jsp에 전달할 수 있음
			ㄴ	model.addAttribute("variable", value)
	
	
	ModelAndView
		-	Public String test4(ModelAndView mv)
			ㄴ	ModelAndView 는 model에 값을 설정하고, View의 이름을 지정까지 할 수 있음
				test4 메소드는 View 의 이름을 return 하지 않고 ModelAndView 객체를 return 함
			ㄴ	mv.addObject("variable", value)
				mv.setViewName("View 이름")
	
	
		*
		ViewResolver에 의해서 jsp가 실행되고 응답 결과가 만들어짐
		Controller에서 View를 지정할 때, ViewResolver가 사용할 data를 Request 영역에 저장함
		Request 영역에 저장한 data를 jsp에서 꺼내서 사용할 때
		${requestScope.number2 } 이라는 EL을 사용함
	
	
	
	
	